services:
  # Main service
  delphi-scraper:
    build:
      context: .
      dockerfile: Dockerfile.rebuild-lock
    container_name: delphi-scraper
    restart: unless-stopped
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env:ro
    env_file:
      - .env
    environment:
      - TZ=UTC
      - NODE_ENV=production
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
      - PUPPETEER_ARGS=--no-sandbox,--disable-setuid-sandbox,--disable-dev-shm-usage,--disable-gpu,--no-first-run,--no-zygote,--single-process
    healthcheck:
      test: ["CMD", "node", "scripts/check-delphi.js", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        mkdir -p /app/data &&
        if [ ! -f /app/data/delphi_cookies.json ]; then echo '{}' > /app/data/delphi_cookies.json; fi &&
        if [ ! -f /app/data/visited_links.json ]; then echo '[]' > /app/data/visited_links.json; fi &&
        if [ ! -f /app/data/processed_reports_cache.json ]; then echo '{}' > /app/data/processed_reports_cache.json; fi &&
        npm run delphi:run"
    
  # Slack digest service
  # slack-digest:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: delphi-slack-digest
  #   restart: unless-stopped
  #   volumes:
  #     - ./data:/app/data
  #   env_file:
  #     - .env
  #   environment:
  #     - TZ=UTC
  #     - NODE_ENV=production
  #   healthcheck:
  #     test: ["CMD", "node", "scripts/check-delphi.js", "--health-check"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   command: npm run digest
  #   profiles:
  #     - digest

  # # Webhook service for real-time notifications
  # webhook:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: delphi-webhook
  #   restart: unless-stopped
  #   volumes:
  #     - ./data:/app/data
  #   env_file:
  #     - .env
  #   environment:
  #     - TZ=UTC
  #     - NODE_ENV=production
  #   ports:
  #     - "3000:3000"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   command: npm run webhook
  #   profiles:
  #     - webhook 